// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

// TODO: profileのIDを指定するかたちではなく各パラメータを生で扱えるようにすべき
type DbscanParam struct {
	DbscanProfileKey int   `json:"dbscanProfileKey"`
	SpotKeys         []int `json:"spotKeys"`
}

type DbscanProfileParam struct {
	DistanceType     DistanceType `json:"distanceType"`
	MinCount         int          `json:"minCount"`
	MaxCount         *int         `json:"maxCount"`
	MeterThreshold   *int         `json:"meterThreshold"`
	MinutesThreshold *int         `json:"minutesThreshold"`
}

type DbscanResult struct {
	ClusterElements []*ClusterElement `json:"ClusterElements"`
	ClusterNum      int               `json:"ClusterNum"`
}

type LatLng struct {
	Lat float64 `json:"lat"`
	Lng float64 `json:"lng"`
}

type SpotsProfileParam struct {
	SpotKeys []int `json:"spotKeys"`
}

type DistanceType string

const (
	DistanceTypeHubeny      DistanceType = "HUBENY"
	DistanceTypeRouteLength DistanceType = "ROUTE_LENGTH"
	DistanceTypeTravelTime  DistanceType = "TRAVEL_TIME"
)

var AllDistanceType = []DistanceType{
	DistanceTypeHubeny,
	DistanceTypeRouteLength,
	DistanceTypeTravelTime,
}

func (e DistanceType) IsValid() bool {
	switch e {
	case DistanceTypeHubeny, DistanceTypeRouteLength, DistanceTypeTravelTime:
		return true
	}
	return false
}

func (e DistanceType) String() string {
	return string(e)
}

func (e *DistanceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DistanceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DistanceType", str)
	}
	return nil
}

func (e DistanceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
