package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"strconv"

	"github.com/wwwwshwww/spot-sandbox/graph/model"
	cluster_element_graph "github.com/wwwwshwww/spot-sandbox/internal/adapter/inbound/cluster_element/graph"
	dbscan_profile_graph "github.com/wwwwshwww/spot-sandbox/internal/adapter/inbound/dbscan_profile/graph"
	spot_graph "github.com/wwwwshwww/spot-sandbox/internal/adapter/inbound/spot/graph"
	spots_profile_graph "github.com/wwwwshwww/spot-sandbox/internal/adapter/inbound/spots_profile/graph"
	dbscan_profile_mysql "github.com/wwwwshwww/spot-sandbox/internal/adapter/outbound/dbscan_profile/mysql"
	spot_mysql "github.com/wwwwshwww/spot-sandbox/internal/adapter/outbound/spot/spot/mysql"
	spot_finder_mysql "github.com/wwwwshwww/spot-sandbox/internal/adapter/outbound/spot/spot_finder/mysql"
	spots_profile_mysql "github.com/wwwwshwww/spot-sandbox/internal/adapter/outbound/spots_profile/mysql"
	"github.com/wwwwshwww/spot-sandbox/internal/common"
	dbscan_profile_domain "github.com/wwwwshwww/spot-sandbox/internal/domain/dbscan_profile"
	"github.com/wwwwshwww/spot-sandbox/internal/domain/spot/spot_finder"
	spots_profile_domain "github.com/wwwwshwww/spot-sandbox/internal/domain/spots_profile"
	"github.com/wwwwshwww/spot-sandbox/internal/domain_service"
	"github.com/wwwwshwww/spot-sandbox/internal/usecase/cluster_element"
	"github.com/wwwwshwww/spot-sandbox/internal/usecase/dbscan_profile"
	"github.com/wwwwshwww/spot-sandbox/internal/usecase/spot"
	"github.com/wwwwshwww/spot-sandbox/internal/usecase/spots_profile"
)

// DbscanProfile is the resolver for the dbscanProfile field.
func (r *clusterElementResolver) DbscanProfile(ctx context.Context, obj *model.ClusterElement) (*model.DbscanProfile, error) {
	dpr := dbscan_profile_mysql.New(r.DB)
	dpuc := dbscan_profile.New(dpr)

	dp, err := dpuc.Get(obj.DbscanProfileID)
	if err != nil {
		return nil, err
	}
	return dbscan_profile_graph.Marshal(dp), nil
}

// SpotsProfile is the resolver for the spotsProfile field.
func (r *clusterElementResolver) SpotsProfile(ctx context.Context, obj *model.ClusterElement) (*model.SpotsProfile, error) {
	spr := spots_profile_mysql.New(r.DB)
	spuc := spots_profile.New(spr)

	sp, err := spuc.Get(obj.SpotsProfileID)
	if err != nil {
		return nil, err
	}
	return spots_profile_graph.Marshal(sp), nil
}

// Spot is the resolver for the spot field.
func (r *clusterElementResolver) Spot(ctx context.Context, obj *model.ClusterElement) (*model.Spot, error) {
	sr := spot_mysql.New(r.DB)
	sf := spot_finder_mysql.New(r.DB)
	suc := spot.New(sr, sf, r.GMC)

	s, err := suc.Get(obj.SpotID)
	if err != nil {
		return nil, err
	}
	return spot_graph.Marshal(s), nil
}

// CreateDbscanProfile is the resolver for the createDbscanProfile field.
func (r *mutationResolver) CreateDbscanProfile(ctx context.Context, input model.NewDbscanProfile) (*model.DbscanProfile, error) {
	dpr := dbscan_profile_mysql.New(r.DB)
	dpuc := dbscan_profile.New(dpr)

	i, err := dpr.NextIdentifier()
	if err != nil {
		return nil, err
	}
	p := dbscan_profile_graph.UnmarshalPreferences(input)
	if err := dpuc.Save(i, p); err != nil {
		return nil, err
	}
	dp, err := dpuc.Get(i)
	if err != nil {
		return nil, err
	}
	return dbscan_profile_graph.Marshal(dp), nil
}

// CreateSpotsProfile is the resolver for the createSpotsProfile field.
func (r *mutationResolver) CreateSpotsProfile(ctx context.Context, input model.NewSpotsProfile) (*model.SpotsProfile, error) {
	spr := spots_profile_mysql.New(r.DB)
	spuc := spots_profile.New(spr)

	i, err := spr.NextIdentifier()
	if err != nil {
		return nil, err
	}
	p := spots_profile_graph.UnmarshalPreferences(input)
	if err := spuc.Save(i, p); err != nil {
		return nil, err
	}
	sp, err := spuc.Get(i)
	if err != nil {
		return nil, err
	}
	return spots_profile_graph.Marshal(sp), nil
}

// CreateSpot is the resolver for the createSpot field.
func (r *mutationResolver) CreateSpot(ctx context.Context, input model.LatLng) (*model.Spot, error) {
	sr := spot_mysql.New(r.DB)
	sf := spot_finder_mysql.New(r.DB)
	suc := spot.New(sr, sf, r.GMC)

	i, err := sr.NextIdentifier()
	if err != nil {
		return nil, err
	}
	latlng := common.LatLng{Lat: input.Lat, Lng: input.Lng}
	if err := suc.Save(i, latlng); err != nil {
		return nil, err
	}
	s, err := suc.Get(i)
	if err != nil {
		return nil, err
	}
	return spot_graph.Marshal(s), nil
}

// Spots is the resolver for the spots field.
func (r *queryResolver) Spots(ctx context.Context) ([]*model.Spot, error) {
	sr := spot_mysql.New(r.DB)
	sf := spot_finder_mysql.New(r.DB)
	suc := spot.New(sr, sf, r.GMC)

	sis, err := suc.ListAllSpots(spot_finder.FilteringOptions{})
	if err != nil {
		return nil, err
	}
	sMap, err := suc.BulkGet(sis)
	if err != nil {
		return nil, err
	}
	result := make([]*model.Spot, len(sis))
	for i, v := range sis {
		result[i] = spot_graph.Marshal(sMap[v])
	}
	return result, nil
}

// Dbscan is the resolver for the dbscan field.
func (r *queryResolver) Dbscan(ctx context.Context, input model.DbscanParam) ([]*model.ClusterElement, error) {
	dpr := dbscan_profile_mysql.New(r.DB)
	spr := spots_profile_mysql.New(r.DB)
	sr := spot_mysql.New(r.DB)
	cs := domain_service.NewClusteringService(ctx, r.GMC, r.DiCC, r.DuCC)
	ceuc := cluster_element.New(sr, dpr, spr, cs)

	dpi, err := strconv.Atoi(input.DbscanProfileID)
	if err != nil {
		return nil, err
	}
	spi, err := strconv.Atoi(input.SpotsProfileID)
	if err != nil {
		return nil, err
	}
	ces, err := ceuc.Calc(
		dbscan_profile_domain.Identifier(dpi),
		spots_profile_domain.Identifier(spi),
	)
	return cluster_element_graph.BatchMarshal(ces), nil
}

// Spots is the resolver for the spots field.
func (r *spotsProfileResolver) Spots(ctx context.Context, obj *model.SpotsProfile) ([]*model.Spot, error) {
	sr := spot_mysql.New(r.DB)
	sf := spot_finder_mysql.New(r.DB)
	suc := spot.New(sr, sf, r.GMC)

	sMap, err := suc.BulkGet(obj.SpotIDs)
	if err != nil {
		return nil, err
	}
	result := make([]*model.Spot, len(obj.SpotIDs))
	for i, v := range obj.SpotIDs {
		result[i] = spot_graph.Marshal(sMap[v])
	}
	return result, nil
}

// ClusterElement returns ClusterElementResolver implementation.
func (r *Resolver) ClusterElement() ClusterElementResolver { return &clusterElementResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// SpotsProfile returns SpotsProfileResolver implementation.
func (r *Resolver) SpotsProfile() SpotsProfileResolver { return &spotsProfileResolver{r} }

type clusterElementResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type spotsProfileResolver struct{ *Resolver }
